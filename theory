1. Which statement is TRUE (only 1)

- We run images, and build containers
- We build images, and run containers (TRUE)
- We build ports, and run volumes
- We build volumes, and run ports

2. What happens to the data inside a container when we stop it? (If there is no volume)

- We can retrieve it in /var/log/docker
- The data is lost (TRUE)
- We can restart the container to retrieve the data
- We cannot stop a container that has no volume

3. True or False?
If appA depends on appB, then appB will not start unless appA is up. (FALSE)

4. Which statement is TRUE (only 1)

- We bind a port to an image
- We bind a port to a dockerfile
- We bind a port to docker-desktop
- We bind a port to a container (TRUE)

5. Which statement is FALSE (only 1)

- You can call 'docker-compose down' to stop the services in a docker-compose file
- You publish a port by adding the EXPOSE tag in the Dockerfile
- Named volumes should be used in production, host volumes are better for development
- You cannot bind multiple applications to the same port

6. Which statement is TRUE (only 1)

- Environment variables are given to the program at runtime
- You can mount a volume on a running container (TRUE)
- You can publish a port on a running container
- Dockerfiles are where you find the logs for your docker containers

7. Which statement is TRUE (only 1)

- You can run an image using a Dockerfile
- You can store docker images in repositories like dockerHub
- WORKDIR is a mandatory tag inside a Dockerfile(TRUE)
- RUN command in Dockerfile is the first command that is run when a container is started

8. True or False?
You can only include 1 service inside a docker-compose.yaml file. If you would like to include more than 1, you must
create multiple docker-compose.yaml files (FALSE)

9. Which address is the same as localhost?

- 0.0.0.0 (TRUE)
- 127.0.0.1 (TRUE)
- about:blank
- 192.0.0.0

10. Which of the following is TRUE (only 1)

- The docker run -p takes an argument in the form of CONTAINER_PORT:HOST_PORT (eg. 8080:8081 maps container port 8080 to host port 8081)
- Docker can run on Windows and Mac, but not linux
- Docker is a programming language just like python, java, c++, etc
- docker-compose has its own version (separate from docker version) (TRUE)











1. How would you explain docker's benefits to a colleague that has never heard of it? Include at least 2 benefits
docker is a open source container which enables the developer to package the applications in to containers with
standardized excecutable components.
benefits of docker are
portability:
once containerized application is tested and deployed , the same container can be deployed in any ohter
other system and it will perform exactly as it did when its tested earlier.
performance:
dockers do not have a os means that containers made using dockers have a small footprint and are faster to create and
 quicker to start

2. A colleague would like to build an application that consists of multiple services:

shopping-front (frontend for the shopping service)
shopping-back (backend for the shopping service)
shopping-db (database for the shopping service)

They are wondering if docker-compose would be useful in their deployment.
What is your opinion? Do you think they should use docker-compose for deployment,
or is it better to use the docker pull/run commands? Please explain reasoning behind decision.

Compose is a tool for defining and running multi-container Docker applications. With Compose you use a YAML file to
configure your applications services. Then with a single command, you create and start all the services from your configuration.
compose file is effective for
multiple isolated environments on a single host.
volumes which save the data once the application is killed.
only recreate containers that have changed.
environment variables examples are paswwords , API's and anythings which can be varied based on the instance.


3. Give a specific example/use-case of why you would add a docker volume to a container. What are volumes used for?
volumes are basically a virtual storage option in a host
use cases would be , in of our classes we build a application which takes users input of the products they buy with the
prices and stores them in a list. it views the user with a list products they input, but without volumes in this case
whenever the application is stopped we lost that list
but with the use of volumes we were able to view the list even after app is topped and re run again.


4. From the following list, add either RUNTIME or BUILDTIME for the following elements:
(are they executed/used at runtime or build time?)

- docker run RUNTIME
- docker build BUILDTIME
- docker-compose up -d RUNTIME
- Dockerfile BUILDTIME
- docker logs -f <container_id> RUNTIME
- publishing ports RUNTIME
- pip install -r requirements.txt BUILDTIME
- CMD flask run --host=0.0.0.0 RUNTIME

5. What is the difference between a host port and a container port? What is their relationship to each other?
host port:  A host port specifies a port on the host to bind to.
container port: A container port specifies a port within a container. This is only necessary as part of a port mapping
when using BRIDGE or USER mode networking with a Docker container.

When you start a container with Docker all of the applications in the container run on specific ports. If you wish to
use a port number to access a specific application, you must first map the containers port number to the docker hosts
port number. Containers can use port mappings to send and receive traffic through ports on the host container instance.
The containerâ€™s port mappings are defined as part of the container definition. The port number on the container that is
connected to the host port was either chosen by the user or allocated automatically.
